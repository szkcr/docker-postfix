#!/usr/bin/env bash

set -e

[ "$DEBUG" == 'true' ] && set -x

# Fix issue with dpkg-reconfigure and locales not installed "perl: warning: Setting locale failed."
unset LANG

cd /etc/postfix

# Copy default spool from cache
if [ ! "$(ls -A /var/spool/postfix)" ]; then
   cp -a /var/spool/postfix.cache/* /var/spool/postfix/
else
  # Fix spool directory permissions
  chgrp -R postdrop /var/spool/postfix/public
  chgrp -R postdrop /var/spool/postfix/maildrop
  postfix set-permissions
fi

# Defaults
: "${SIZELIMIT:=15728640}"  # 10Meg with headroom
: "${RELAYHOST:=}" # empty

# DKIM
if [ "${USE_DKIM}" == "yes" ]; then
    # TODO s6-svwait for dkim
    echo "postfix >> Enabling dkim milter"
    postconf -e milter_protocol="6"
    postconf -e milter_default_action="accept"
    postconf -e smtpd_milters="inet:localhost:8891"
    postconf -e non_smtpd_milters="inet:localhost:8891"
fi

# TLS
: "${USE_TLS:=yes}"
: "${TLS_SECURITY_LEVEL:=may}"
: "${TLS_KEY:=/etc/ssl/private/ssl-cert-snakeoil.key}"
: "${TLS_CRT:=/etc/ssl/certs/ssl-cert-snakeoil.pem}"
: "${TLS_CA:=}"

# General
: "${POSTFIX_ADD_MISSING_HEADERS:=no}"
: "${INET_PROTOCOLS:=all}"

echo "postfix >> Setting smtpd_use_tls to ${USE_TLS}"
postconf -e smtpd_use_tls="${USE_TLS}"

if [ "${USE_TLS}" == "yes" ]; then
    if [ "${TLS_KEY}" == "/etc/ssl/private/ssl-cert-snakeoil.key" ]; then
        echo "postfix >> Generating snakeoil SSL cert"
        dpkg-reconfigure -f noninteractive ssl-cert
    fi
    echo "postfix >> Setting smtp_tls parameters"
    postconf -e smtp_tls_security_level="${TLS_SECURITY_LEVEL}"
    postconf -e smtp_tls_CApath="/etc/ssl/certs"
    postconf -e smtp_tls_loglevel="1"
    echo "postfix >> Setting smtpd_tls parameters"
    postconf -e smtpd_tls_key_file="${TLS_KEY}"
    postconf -e smtpd_tls_cert_file="${TLS_CRT}"
    postconf -e smtpd_tls_CAfile="${TLS_CA}"
fi

# Configure Postfix General parameters
echo "postfix >> Setting mailname to ${MAILNAME}"
postconf -e myorigin="${MAILNAME}"
postconf -e myhostname="${MAILNAME}"
postconf -e mydestination="${MAILNAME}"

echo "postfix >> Setting mynetworks to ${MYNETWORKS}"
postconf -e mynetworks="${MYNETWORKS}"

echo "postfix >> Setting message_size_limit to ${SIZELIMIT}"
postconf -e message_size_limit="${SIZELIMIT}"

if [ -n "${RELAYHOST}" ]; then
  echo "postfix >> Setting relayhost to ${RELAYHOST}"
  postconf -e relayhost="${RELAYHOST}"
fi

if [ "${RELAYHOST_AUTH}" == "yes" ]; then
    echo "postfix >> Enabling relayhost authentication"
    postconf -e smtp_sasl_auth_enable=yes
    postconf -e smtp_sasl_security_options=noanonymous
    # require encryption with relayhost auth
    postconf -e smtp_tls_security_level=encrypt
    ## only static
    postconf -e smtp_sasl_password_maps=${RELAYHOST_PASSWORDMAP}
fi

echo "postfix >> Setting always_add_missing_headers to ${POSTFIX_ADD_MISSING_HEADERS}"
postconf -e always_add_missing_headers="${POSTFIX_ADD_MISSING_HEADERS}"

echo "postfix >> Setting inet_protocols to ${INET_PROTOCOLS}"
postconf -e inet_protocols="${INET_PROTOCOLS}"

if [[ "${HEADER_CHECKS}" == "true" ]]; then
  echo "postfix >> Setting header_checks"
  postconf -e smtp_header_checks="regexp:/etc/postfix/header_checks"
fi

if [ -n "${BOUNCE_ADDRESS}" ]; then
  echo "postfix >> Setting bounce address to ${BOUNCE_ADDRESS}"
  postconf -e notify_classes="bounce"
  postconf -e bounce_notice_recipient="${BOUNCE_ADDRESS}"
fi

# exit cleanly
trap "{ /usr/sbin/service postfix stop; }" EXIT

# Cleanup stale pids incase we hadn't exited cleanly
rm -f /var/spool/postfix/pid/*

# check postfix is happy
echo "postfix >> Checking Postfix Configuration"
postfix check

# start postfix
/usr/sbin/service postfix start

sleep 10 # wait for startup

# watch for postfix exit
MASTER_PID="$(cat /var/spool/postfix/pid/master.pid)"
while kill -0 "${MASTER_PID}" 2>/dev/null; do
  sleep 1
done
